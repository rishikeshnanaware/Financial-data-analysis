# -*- coding: utf-8 -*-
"""SambhajiMaharaj.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NznvHTMkUyHyI2IzH_FNaxAqilb5j_yu
"""

!pip install kaggle #Installing Kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d sbhatti/financial-sentiment-analysis #Downloading Kaggle dataset

from zipfile import ZipFile
dataset = '/content/financial-sentiment-analysis.zip'
with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('Done')

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

finance_data=pd.read_csv('/content/data.csv', encoding='ISO-8859-1') #Reading dataset from data file and storing in a dataframe

finance_data.head() #Printing first five rows of dataset

finance_data.shape #Dataframe has 5842 rows and 2 columns

finance_data.rename(columns = {'Sentiment':'target'}, inplace=True) #Renaming column name 'Sentiment' as 'target'

finance_data.head()

finance_data.replace({'target':{'positive':1}},inplace=True) #Replacing value 'positive' in column 'target' to 1

finance_data.replace({'target':{'neutral':0}},inplace=True) #Replacing value 'neutral' in column 'target' to 0
finance_data.replace({'target':{'negative':-1}},inplace=True) #Replacing value 'negative' in column 'target' to -1

finance_data.head()

finance_data['target'].value_counts() #Displaying total positive, neutral and negative sentiments in dataset

finance_data_neutral=finance_data[finance_data['target']==0]

finance_data_neutral.head()

finance_data_positive=finance_data[finance_data['target']==1]

drop_indices = np.random.choice(finance_data_neutral.index, 2270, replace=False)
finance_data_neutral.drop(drop_indices, inplace=True)
finance_data_neutral.head()

finance_data_neutral.shape

drop_indices = np.random.choice(finance_data_positive.index, 992, replace=False)
finance_data_positive.drop(drop_indices, inplace=True)
finance_data_positive.head()
finance_data_positive.shape

finance_data=finance_data[finance_data.target == -1]
finance_data.head()

finance_data=pd.concat([finance_data,finance_data_neutral],ignore_index=False)

finance_data.sort_index()

finance_data=pd.concat([finance_data,finance_data_positive],ignore_index=False)

finance_data.sort_index(inplace=True)

finance_data.head(10)

finance_data.head(10)

port_stem=PorterStemmer()

def stemming(content):                                                                         # Making a stemmer to stem Sentences
  stemmed_content=re.sub('[^a-zA-Z]', ' ', content)
  stemmed_content=stemmed_content.lower()
  stemmed_content=stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content=' '.join(stemmed_content)
  return stemmed_content

finance_data['stemmed_content']=finance_data['Sentence'].apply(stemming)                       #Passing dataframe to stemmer

print(finance_data['stemmed_content'])                                                          # Displaying stemmed content

x=finance_data['stemmed_content'].values
y=finance_data['target'].values
print(x)

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)                   #Splitting data as training data and testing data

finance_data['stemmed_content'].isnull().sum()

print(x_train)

vectorizer=TfidfVectorizer()
x_train=vectorizer.fit_transform(x_train)                                            # Extracting features from training data
x_test=vectorizer.transform(x_test)                                                  # Extracting features from testing data

mymodel=LogisticRegression(max_iter=1000)                                            # Using LogisticRegressing model

mymodel.fit(x_train,y_train)                                                         # Training model

x_train_prediction=mymodel.predict(x_train)                                           # Predicting trained data values
training_data_accuracy=accuracy_score(y_train,x_train_prediction)                     # Accuracy on trained data

print("Accuracy = ",training_data_accuracy)

x_test_prediction=mymodel.predict(x_test)                                            # Predicting testing data values
test_data_accuracy=accuracy_score(y_test,x_test_prediction)                          # Accuracy on trained data

print("Accuracy = ",test_data_accuracy)